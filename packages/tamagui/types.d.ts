// Generated by dts-bundle-generator v5.9.0

/// <reference types="node" />
/// <reference types="prop-types" />
/// <reference types="react" />
/// <reference types="react-native" />
/// <reference types="scheduler" />

export declare function concatClassName(_cn: any): string;
export declare const stylePropsTransform: {
	x: boolean;
	y: boolean;
	scale: boolean;
	perspective: boolean;
	scaleX: boolean;
	scaleY: boolean;
	skewX: boolean;
	skewY: boolean;
	matrix: boolean;
	rotate: boolean;
	rotateY: boolean;
	rotateX: boolean;
	rotateZ: boolean;
};
export declare const stylePropsView: Readonly<{
	userSelect?: boolean | undefined;
	cursor?: boolean | undefined;
	contain?: boolean | undefined;
	pointerEvents?: boolean | undefined;
	boxSizing?: boolean | undefined;
	x: boolean;
	y: boolean;
	scale: boolean;
	perspective: boolean;
	scaleX: boolean;
	scaleY: boolean;
	skewX: boolean;
	skewY: boolean;
	matrix: boolean;
	rotate: boolean;
	rotateY: boolean;
	rotateX: boolean;
	rotateZ: boolean;
	backfaceVisibility: boolean;
	backgroundColor: boolean;
	borderBottomColor: boolean;
	borderBottomEndRadius: boolean;
	borderBottomLeftRadius: boolean;
	borderBottomRightRadius: boolean;
	borderBottomStartRadius: boolean;
	borderBottomWidth: boolean;
	borderColor: boolean;
	borderEndColor: boolean;
	borderLeftColor: boolean;
	borderLeftWidth: boolean;
	borderRadius: boolean;
	borderRightColor: boolean;
	borderRightWidth: boolean;
	borderStartColor: boolean;
	borderStyle: boolean;
	borderTopColor: boolean;
	borderTopEndRadius: boolean;
	borderTopLeftRadius: boolean;
	borderTopRightRadius: boolean;
	borderTopStartRadius: boolean;
	borderTopWidth: boolean;
	borderWidth: boolean;
	opacity: boolean;
	transform: boolean;
	alignContent: boolean;
	alignItems: boolean;
	alignSelf: boolean;
	aspectRatio: boolean;
	borderEndWidth: boolean;
	borderStartWidth: boolean;
	bottom: boolean;
	display: boolean;
	end: boolean;
	flex: boolean;
	flexBasis: boolean;
	flexDirection: boolean;
	flexGrow: boolean;
	flexShrink: boolean;
	flexWrap: boolean;
	height: boolean;
	justifyContent: boolean;
	left: boolean;
	margin: boolean;
	marginBottom: boolean;
	marginEnd: boolean;
	marginHorizontal: boolean;
	marginLeft: boolean;
	marginRight: boolean;
	marginStart: boolean;
	marginTop: boolean;
	marginVertical: boolean;
	maxHeight: boolean;
	maxWidth: boolean;
	minHeight: boolean;
	minWidth: boolean;
	overflow: boolean;
	padding: boolean;
	paddingBottom: boolean;
	paddingEnd: boolean;
	paddingHorizontal: boolean;
	paddingLeft: boolean;
	paddingRight: boolean;
	paddingStart: boolean;
	paddingTop: boolean;
	paddingVertical: boolean;
	position: boolean;
	right: boolean;
	start: boolean;
	top: boolean;
	width: boolean;
	zIndex: boolean;
	direction: boolean;
	shadowColor: boolean;
	shadowOffset: boolean;
	shadowOpacity: boolean;
	shadowRadius: boolean;
}>;
export declare const stylePropsTextOnly: Readonly<{
	whiteSpace?: boolean | undefined;
	wordWrap?: boolean | undefined;
	textOverflow?: boolean | undefined;
	textDecorationDistance?: boolean | undefined;
	color: boolean;
	fontFamily: boolean;
	fontSize: boolean;
	fontStyle: boolean;
	fontWeight: boolean;
	letterSpacing: boolean;
	lineHeight: boolean;
	textAlign: boolean;
	textDecorationLine: boolean;
	textDecorationStyle: boolean;
	textDecorationColor: boolean;
	textShadowColor: boolean;
	textShadowOffset: boolean;
	textShadowRadius: boolean;
	textTransform: boolean;
}>;
export declare const stylePropsText: Readonly<{
	whiteSpace?: boolean | undefined;
	wordWrap?: boolean | undefined;
	textOverflow?: boolean | undefined;
	textDecorationDistance?: boolean | undefined;
	color: boolean;
	fontFamily: boolean;
	fontSize: boolean;
	fontStyle: boolean;
	fontWeight: boolean;
	letterSpacing: boolean;
	lineHeight: boolean;
	textAlign: boolean;
	textDecorationLine: boolean;
	textDecorationStyle: boolean;
	textDecorationColor: boolean;
	textShadowColor: boolean;
	textShadowOffset: boolean;
	textShadowRadius: boolean;
	textTransform: boolean;
	userSelect?: boolean | undefined;
	cursor?: boolean | undefined;
	contain?: boolean | undefined;
	pointerEvents?: boolean | undefined;
	boxSizing?: boolean | undefined;
	x: boolean;
	y: boolean;
	scale: boolean;
	perspective: boolean;
	scaleX: boolean;
	scaleY: boolean;
	skewX: boolean;
	skewY: boolean;
	matrix: boolean;
	rotate: boolean;
	rotateY: boolean;
	rotateX: boolean;
	rotateZ: boolean;
	backfaceVisibility: boolean;
	backgroundColor: boolean;
	borderBottomColor: boolean;
	borderBottomEndRadius: boolean;
	borderBottomLeftRadius: boolean;
	borderBottomRightRadius: boolean;
	borderBottomStartRadius: boolean;
	borderBottomWidth: boolean;
	borderColor: boolean;
	borderEndColor: boolean;
	borderLeftColor: boolean;
	borderLeftWidth: boolean;
	borderRadius: boolean;
	borderRightColor: boolean;
	borderRightWidth: boolean;
	borderStartColor: boolean;
	borderStyle: boolean;
	borderTopColor: boolean;
	borderTopEndRadius: boolean;
	borderTopLeftRadius: boolean;
	borderTopRightRadius: boolean;
	borderTopStartRadius: boolean;
	borderTopWidth: boolean;
	borderWidth: boolean;
	opacity: boolean;
	transform: boolean;
	alignContent: boolean;
	alignItems: boolean;
	alignSelf: boolean;
	aspectRatio: boolean;
	borderEndWidth: boolean;
	borderStartWidth: boolean;
	bottom: boolean;
	display: boolean;
	end: boolean;
	flex: boolean;
	flexBasis: boolean;
	flexDirection: boolean;
	flexGrow: boolean;
	flexShrink: boolean;
	flexWrap: boolean;
	height: boolean;
	justifyContent: boolean;
	left: boolean;
	margin: boolean;
	marginBottom: boolean;
	marginEnd: boolean;
	marginHorizontal: boolean;
	marginLeft: boolean;
	marginRight: boolean;
	marginStart: boolean;
	marginTop: boolean;
	marginVertical: boolean;
	maxHeight: boolean;
	maxWidth: boolean;
	minHeight: boolean;
	minWidth: boolean;
	overflow: boolean;
	padding: boolean;
	paddingBottom: boolean;
	paddingEnd: boolean;
	paddingHorizontal: boolean;
	paddingLeft: boolean;
	paddingRight: boolean;
	paddingStart: boolean;
	paddingTop: boolean;
	paddingVertical: boolean;
	position: boolean;
	right: boolean;
	start: boolean;
	top: boolean;
	width: boolean;
	zIndex: boolean;
	direction: boolean;
	shadowColor: boolean;
	shadowOffset: boolean;
	shadowOpacity: boolean;
	shadowRadius: boolean;
}>;
export declare const stylePropsAll: Readonly<{
	whiteSpace?: boolean | undefined;
	wordWrap?: boolean | undefined;
	textOverflow?: boolean | undefined;
	textDecorationDistance?: boolean | undefined;
	color: boolean;
	fontFamily: boolean;
	fontSize: boolean;
	fontStyle: boolean;
	fontWeight: boolean;
	letterSpacing: boolean;
	lineHeight: boolean;
	textAlign: boolean;
	textDecorationLine: boolean;
	textDecorationStyle: boolean;
	textDecorationColor: boolean;
	textShadowColor: boolean;
	textShadowOffset: boolean;
	textShadowRadius: boolean;
	textTransform: boolean;
	userSelect?: boolean | undefined;
	cursor?: boolean | undefined;
	contain?: boolean | undefined;
	pointerEvents?: boolean | undefined;
	boxSizing?: boolean | undefined;
	x: boolean;
	y: boolean;
	scale: boolean;
	perspective: boolean;
	scaleX: boolean;
	scaleY: boolean;
	skewX: boolean;
	skewY: boolean;
	matrix: boolean;
	rotate: boolean;
	rotateY: boolean;
	rotateX: boolean;
	rotateZ: boolean;
	backfaceVisibility: boolean;
	backgroundColor: boolean;
	borderBottomColor: boolean;
	borderBottomEndRadius: boolean;
	borderBottomLeftRadius: boolean;
	borderBottomRightRadius: boolean;
	borderBottomStartRadius: boolean;
	borderBottomWidth: boolean;
	borderColor: boolean;
	borderEndColor: boolean;
	borderLeftColor: boolean;
	borderLeftWidth: boolean;
	borderRadius: boolean;
	borderRightColor: boolean;
	borderRightWidth: boolean;
	borderStartColor: boolean;
	borderStyle: boolean;
	borderTopColor: boolean;
	borderTopEndRadius: boolean;
	borderTopLeftRadius: boolean;
	borderTopRightRadius: boolean;
	borderTopStartRadius: boolean;
	borderTopWidth: boolean;
	borderWidth: boolean;
	opacity: boolean;
	transform: boolean;
	alignContent: boolean;
	alignItems: boolean;
	alignSelf: boolean;
	aspectRatio: boolean;
	borderEndWidth: boolean;
	borderStartWidth: boolean;
	bottom: boolean;
	display: boolean;
	end: boolean;
	flex: boolean;
	flexBasis: boolean;
	flexDirection: boolean;
	flexGrow: boolean;
	flexShrink: boolean;
	flexWrap: boolean;
	height: boolean;
	justifyContent: boolean;
	left: boolean;
	margin: boolean;
	marginBottom: boolean;
	marginEnd: boolean;
	marginHorizontal: boolean;
	marginLeft: boolean;
	marginRight: boolean;
	marginStart: boolean;
	marginTop: boolean;
	marginVertical: boolean;
	maxHeight: boolean;
	maxWidth: boolean;
	minHeight: boolean;
	minWidth: boolean;
	overflow: boolean;
	padding: boolean;
	paddingBottom: boolean;
	paddingEnd: boolean;
	paddingHorizontal: boolean;
	paddingLeft: boolean;
	paddingRight: boolean;
	paddingStart: boolean;
	paddingTop: boolean;
	paddingVertical: boolean;
	position: boolean;
	right: boolean;
	start: boolean;
	top: boolean;
	width: boolean;
	zIndex: boolean;
	direction: boolean;
	shadowColor: boolean;
	shadowOffset: boolean;
	shadowOpacity: boolean;
	shadowRadius: boolean;
}>;
export declare const validStylesPseudo: {
	hoverStyle: boolean;
	pressStyle: boolean;
	focusStyle: boolean;
};
export declare const validStyles: {
	userSelect?: boolean | undefined;
	cursor?: boolean | undefined;
	contain?: boolean | undefined;
	pointerEvents?: boolean | undefined;
	boxSizing?: boolean | undefined;
	x: boolean;
	y: boolean;
	scale: boolean;
	perspective: boolean;
	scaleX: boolean;
	scaleY: boolean;
	skewX: boolean;
	skewY: boolean;
	matrix: boolean;
	rotate: boolean;
	rotateY: boolean;
	rotateX: boolean;
	rotateZ: boolean;
	backfaceVisibility: boolean;
	backgroundColor: boolean;
	borderBottomColor: boolean;
	borderBottomEndRadius: boolean;
	borderBottomLeftRadius: boolean;
	borderBottomRightRadius: boolean;
	borderBottomStartRadius: boolean;
	borderBottomWidth: boolean;
	borderColor: boolean;
	borderEndColor: boolean;
	borderLeftColor: boolean;
	borderLeftWidth: boolean;
	borderRadius: boolean;
	borderRightColor: boolean;
	borderRightWidth: boolean;
	borderStartColor: boolean;
	borderStyle: boolean;
	borderTopColor: boolean;
	borderTopEndRadius: boolean;
	borderTopLeftRadius: boolean;
	borderTopRightRadius: boolean;
	borderTopStartRadius: boolean;
	borderTopWidth: boolean;
	borderWidth: boolean;
	opacity: boolean;
	transform: boolean;
	alignContent: boolean;
	alignItems: boolean;
	alignSelf: boolean;
	aspectRatio: boolean;
	borderEndWidth: boolean;
	borderStartWidth: boolean;
	bottom: boolean;
	display: boolean;
	end: boolean;
	flex: boolean;
	flexBasis: boolean;
	flexDirection: boolean;
	flexGrow: boolean;
	flexShrink: boolean;
	flexWrap: boolean;
	height: boolean;
	justifyContent: boolean;
	left: boolean;
	margin: boolean;
	marginBottom: boolean;
	marginEnd: boolean;
	marginHorizontal: boolean;
	marginLeft: boolean;
	marginRight: boolean;
	marginStart: boolean;
	marginTop: boolean;
	marginVertical: boolean;
	maxHeight: boolean;
	maxWidth: boolean;
	minHeight: boolean;
	minWidth: boolean;
	overflow: boolean;
	padding: boolean;
	paddingBottom: boolean;
	paddingEnd: boolean;
	paddingHorizontal: boolean;
	paddingLeft: boolean;
	paddingRight: boolean;
	paddingStart: boolean;
	paddingTop: boolean;
	paddingVertical: boolean;
	position: boolean;
	right: boolean;
	start: boolean;
	top: boolean;
	width: boolean;
	zIndex: boolean;
	direction: boolean;
	shadowColor: boolean;
	shadowOffset: boolean;
	shadowOpacity: boolean;
	shadowRadius: boolean;
	hoverStyle: boolean;
	pressStyle: boolean;
	focusStyle: boolean;
};
export declare type StyleObject = {
	property: string;
	value: string;
	className: string;
	identifier: string;
	rules: string[];
};
export declare const AllRules: Set<unknown>;
export declare const getStyleRules: () => Set<unknown>;
export declare class Variable {
	name: string;
	val: string | number;
	variable: string | number;
	constructor({ val, name }: VariableIn);
}
export declare type VariableIn = {
	val: string | number;
	name: string;
};
export declare const createVariable: (props: VariableIn) => Variable;
export declare function isVariable(v: Variable | any): v is Variable;
export declare type ThemeProviderProps = {
	themes: any;
	defaultTheme: string;
	disableRootThemeClass?: boolean;
	children?: any;
};
export declare const GET_DEFAULT_THEME = "___TGUI";
export declare const ThemeProvider: (props: ThemeProviderProps) => JSX.Element;
export interface CreateTokens<Val extends number | string | Variable = number | string | Variable> {
	font: {
		[key: string]: GenericFont;
	};
	color: {
		[key: string]: Val;
	};
	space: {
		[key: string]: Val;
	};
	size: {
		[key: string]: Val;
	};
	radius: {
		[key: string]: Val;
	};
	zIndex: {
		[key: string]: Val;
	};
}
export declare type GenericTokens = CreateTokens;
export declare type GenericThemes = {
	[key: string]: {
		bg: string | Variable;
		bg2: string | Variable;
		bg3: string | Variable;
		bg4: string | Variable;
		color: string | Variable;
		color2: string | Variable;
		color3: string | Variable;
		color4: string | Variable;
		borderColor: string | Variable;
		borderColor2: string | Variable;
		shadowColor: string | Variable;
		shadowColor2: string | Variable;
	};
};
export declare type GenericShorthands = {};
export declare type GenericMedia<K extends string = string> = {
	[key in K]: {
		[key: string]: number | string;
	};
};
export interface TamaguiCustomConfig {
}
export interface TamaguiConfig extends Omit<GenericTamaguiConfig, keyof TamaguiCustomConfig>, TamaguiCustomConfig {
}
export declare type CreateTamaguiConfig<A extends GenericTokens, B extends GenericThemes, C extends GenericShorthands, D extends GenericMedia> = Partial<Pick<ThemeProviderProps, "defaultTheme" | "disableRootThemeClass">> & {
	tokens: A;
	themes: B;
	shorthands: C;
	media: D;
};
export declare type GenericTamaguiConfig = CreateTamaguiConfig<GenericTokens, GenericThemes, GenericShorthands, GenericMedia>;
export declare type ThemeObject = TamaguiConfig["themes"][keyof TamaguiConfig["themes"]];
export declare type Tokens = TamaguiConfig["tokens"];
export declare type Shorthands = TamaguiConfig["shorthands"];
export declare type Media = TamaguiConfig["media"];
export declare type Themes = TamaguiConfig["themes"];
export declare type ThemeName = keyof Themes extends `${infer Prefix}-light` ? Prefix | keyof Themes : keyof Themes;
export declare type ThemeKeys = keyof ThemeObject;
export declare type ThemeKeyVariables = `$${ThemeKeys}`;
export declare type TamaguiInternalConfig<A extends GenericTokens = GenericTokens, B extends GenericThemes = GenericThemes, C extends GenericShorthands = GenericShorthands, D extends GenericMedia = GenericMedia> = CreateTamaguiConfig<A, B, C, D> & {
	Provider: (props: TamaguiProviderProps) => any;
	themeParsed: {
		[key: string]: Variable;
	};
	tokensParsed: CreateTokens<Variable>;
	themeConfig: any;
	getCSS: () => string;
};
export declare type UnionableString = string & {};
export declare type UnionableNumber = number & {};
export declare type PropTypes<A extends StaticComponent> = A extends React.FunctionComponent<infer Props> ? Props : unknown;
export declare type GenericFont = {
	size: {
		[key: string | number]: number | Variable;
	};
	lineHeight: {
		[key: string | number]: number | Variable;
	};
	letterSpacing: {
		[key: string | number]: number | Variable;
	};
	weight: {
		[key: string | number]: string | Variable;
	};
	family: string | Variable;
};
export declare type MediaKeys = keyof Media;
export declare type MediaQueryObject = {
	[key: string]: string | number | string;
};
export declare type MediaQueryState = {
	[key in string]: boolean;
};
export declare type MediaQueryKey = keyof Media;
export declare type MediaProps<A> = {
	[key in `$${MediaQueryKey}`]?: A;
};
export declare type MediaQueries = {
	[key in MediaQueryKey]: MediaQueryObject;
};
export declare type ConfigureMediaQueryOptions = {
	queries?: MediaQueries;
	defaultActive?: MediaQueryKey[];
};
export declare type TransformStyleProps = {
	x?: number;
	y?: number;
	perspective?: number;
	scale?: number;
	scaleX?: number;
	scaleY?: number;
	skewX?: string;
	skewY?: string;
	matrix?: number[];
	rotate?: string;
	rotateY?: string;
	rotateX?: string;
	rotateZ?: string;
};
export declare type ComponentPropsBase = {
	className?: string;
	tag?: string;
	animated?: boolean;
	onHoverIn?: (e: MouseEvent) => any;
	onHoverOut?: (e: MouseEvent) => any;
	onPress?: (e: GestureResponderEvent) => any;
	onPressIn?: (e: GestureResponderEvent) => any;
	onPressOut?: (e: GestureResponderEvent) => any;
	onMouseEnter?: (e: GestureResponderEvent) => any;
	onMouseLeave?: (e: GestureResponderEvent) => any;
	space?: Tokens["space"][keyof Tokens["space"]] | boolean | string | number;
	pointerEvents?: string;
};
export declare type GetTokenFontKeysFor<A extends "size" | "weight" | "letterSpacing" | "family" | "lineHeight"> = keyof Tokens["font"][keyof Tokens["font"]][A];
export declare type SpaceTokens = `$${keyof Tokens["space"]}`;
export declare type ThemeValue<A> = Omit<A, string> | UnionableString | Variable;
export declare type WithThemeValues<T extends object> = {
	[K in keyof T]: ThemeValue<T[K]> | (K extends ColorableKeys ? ThemeKeyVariables : K extends SizeKeys ? `$${keyof Tokens["size"]}` : K extends FontKeys ? `$${keyof Tokens["font"]}` : K extends FontSizeKeys ? `$${GetTokenFontKeysFor<"size">}` : K extends SpaceKeys ? `$${keyof Tokens["space"]}` : K extends ColorKeys ? `$${keyof Tokens["color"]}` : K extends ZIndexKeys ? `$${keyof Tokens["zIndex"]}` : K extends LineHeightKeys ? `$${GetTokenFontKeysFor<"lineHeight">}` : K extends FontWeightKeys ? `$${GetTokenFontKeysFor<"weight">}` : K extends FontLetterSpacingKeys ? `$${GetTokenFontKeysFor<"letterSpacing">}` : {});
};
export declare type WithShorthands<StyleProps> = {
	[Key in keyof Shorthands]?: Shorthands[Key] extends keyof StyleProps ? StyleProps[Shorthands[Key]] | null : {};
};
export declare type WithThemeAndShorthands<A extends object> = WithThemeValues<A> & WithShorthands<WithThemeValues<A>>;
export declare type WithThemeShorthandsAndPseudos<A extends object> = WithThemeAndShorthands<A> & {
	hoverStyle?: WithThemeAndShorthands<A> | null;
	pressStyle?: WithThemeAndShorthands<A> | null;
};
export declare type WithThemeShorthandsPseudosAndMedia<A extends object> = WithThemeShorthandsAndPseudos<A> & MediaProps<WithThemeShorthandsAndPseudos<A>>;
export declare type WebOnlyStyleProps = {
	cursor?: string;
	contain?: "none" | "strict" | "content" | "size" | "layout" | "paint" | string;
	display?: "inherit" | "none" | "inline" | "block" | "contents" | "flex" | "inline-flex";
	pointerEvents?: ViewProps["pointerEvents"];
};
export declare type StackStyleProps = WithThemeShorthandsPseudosAndMedia<Omit<ViewStyle, "display" | "backfaceVisibility" | "elevation"> & TransformStyleProps & WebOnlyStyleProps>;
export declare type StackProps = Omit<RNWInternalProps, "children"> & Omit<ViewProps, "display" | "children"> & StackStyleProps & ComponentPropsBase & {
	ref?: RefObject<View | HTMLElement> | ((node: View | HTMLElement) => any);
	children?: any | any[];
};
export declare type TextStyleProps = WithThemeShorthandsPseudosAndMedia<Omit<TextStyle, "display" | "backfaceVisibility"> & TransformStyleProps & WebOnlyStyleProps>;
export declare type TextProps = Omit<ReactTextProps, "style"> & TextStyleProps & ComponentPropsBase & {
	ellipse?: boolean;
	selectable?: boolean;
	textDecorationDistance?: number;
};
export declare type StaticComponent<Props = any, VariantProps = any, StaticConfParsed = StaticConfigParsed, ParentVariantProps = any> = React.FunctionComponent<Props> & {
	staticConfig: StaticConfParsed;
	variantProps?: VariantProps;
	extractable: <X>(a: X) => X;
};
export declare type TamaguiProviderProps = Partial<Omit<ThemeProviderProps, "children">> & {
	initialWindowMetrics?: any;
	fallback?: any;
	children?: any;
};
export declare type RNWInternalProps = {
	accessibilityState?: {
		busy?: boolean;
		checked?: boolean | "mixed";
		disabled?: boolean;
		expanded?: boolean;
		grabbed?: boolean;
		hidden?: boolean;
		invalid?: boolean;
		modal?: boolean;
		pressed?: boolean;
		readonly?: boolean;
		required?: boolean;
		selected?: boolean;
	};
	accessibilityValue?: {
		max?: number;
		min?: number;
		now?: number;
		text?: string;
	};
	children?: any;
	focusable?: boolean;
	nativeID?: string;
	onBlur?: (e: any) => void;
	onClick?: (e: any) => void;
	onClickCapture?: (e: any) => void;
	onContextMenu?: (e: any) => void;
	onFocus?: (e: any) => void;
	onKeyDown?: (e: any) => void;
	onKeyUp?: (e: any) => void;
	onMoveShouldSetResponder?: (e: any) => boolean;
	onMoveShouldSetResponderCapture?: (e: any) => boolean;
	onResponderEnd?: (e: any) => void;
	onResponderGrant?: (e: any) => void;
	onResponderMove?: (e: any) => void;
	onResponderReject?: (e: any) => void;
	onResponderRelease?: (e: any) => void;
	onResponderStart?: (e: any) => void;
	onResponderTerminate?: (e: any) => void;
	onResponderTerminationRequest?: (e: any) => boolean;
	onScrollShouldSetResponder?: (e: any) => boolean;
	onScrollShouldSetResponderCapture?: (e: any) => boolean;
	onSelectionChangeShouldSetResponder?: (e: any) => boolean;
	onSelectionChangeShouldSetResponderCapture?: (e: any) => boolean;
	onStartShouldSetResponder?: (e: any) => boolean;
	onStartShouldSetResponderCapture?: (e: any) => boolean;
	pointerEvents?: "box-none" | "none" | "box-only" | "auto";
	testID?: string;
	dataSet?: Object;
	onMouseDown?: (e: any) => void;
	onMouseEnter?: (e: any) => void;
	onMouseLeave?: (e: any) => void;
	onMouseMove?: (e: any) => void;
	onMouseOver?: (e: any) => void;
	onMouseOut?: (e: any) => void;
	onMouseUp?: (e: any) => void;
	onScroll?: (e: any) => void;
	onTouchCancel?: (e: any) => void;
	onTouchCancelCapture?: (e: any) => void;
	onTouchEnd?: (e: any) => void;
	onTouchEndCapture?: (e: any) => void;
	onTouchMove?: (e: any) => void;
	onTouchMoveCapture?: (e: any) => void;
	onTouchStart?: (e: any) => void;
	onTouchStartCapture?: (e: any) => void;
	onWheel?: (e: any) => void;
	href?: string;
	hrefAttrs?: {
		download?: boolean;
		rel?: string;
		target?: string;
	};
};
export declare type StaticConfigParsed = StaticConfig & {
	parsed: true;
	propMapper: (key: string, value: any, theme: ThemeObject, props: any) => undefined | boolean | {
		[key: string]: any;
	};
	variantsParsed?: {
		[key: string]: {
			[key: string]: any;
		};
	};
};
export declare type StaticConfig = {
	Component?: StaticComponent;
	variants?: {
		[key: string]: {
			[key: string]: ((a: any, b: any) => any) | {
				[key: string]: any;
			};
		};
	};
	neverFlatten?: boolean | "jsx";
	isText?: boolean;
	validStyles?: {
		[key: string]: boolean;
	};
	validPropsExtra?: {
		[key: string]: any;
	};
	defaultProps?: any;
	deoptProps?: Set<string>;
	ensureOverriddenProp?: {
		[key: string]: boolean;
	};
	isZStack?: boolean;
};
export declare type ColorableKeys = "color" | "backgroundColor" | "borderColor" | "borderTopColor" | "borderBottomColor" | "borderLeftColor" | "borderRightColor" | "shadowColor";
export declare type SizeKeys = "width" | "height" | "minWidth" | "minHeight" | "maxWidth" | "maxHeight";
export declare type FontKeys = "fontFamily";
export declare type FontSizeKeys = "fontSize";
export declare type FontWeightKeys = "fontWeight";
export declare type FontLetterSpacingKeys = "letterSpacing";
export declare type LineHeightKeys = "lineHeight";
export declare type ZIndexKeys = "zIndex";
export declare type ColorKeys = "color" | "backgroundColor" | "borderColor" | "borderBottomColor" | "borderTopColor" | "borderLeftColor" | "borderRightColor";
export declare type SpaceKeys = "padding" | "paddingHorizontal" | "paddingVertical" | "paddingLeft" | "paddingTop" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingEnd" | "paddingStart" | "margin" | "marginHorizontal" | "marginVertical" | "marginLeft" | "marginTop" | "marginBottom" | "marginLeft" | "marginRight" | "marginEnd" | "marginStart" | "x" | "y" | "scale" | "scaleX" | "scaleY" | "borderTopEndRadius" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderTopStartRadius" | "borderBottomEndRadius" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderBottomStartRadius" | "borderBottomWidth" | "borderLeftWidth" | "borderRadius" | "borderRightWidth" | "borderTopEndRadius" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderEndWidth" | "borderStartWidth" | "borderTopStartRadius" | "borderTopWidth" | "borderWidth" | "left" | "top" | "right" | "bottom" | "shadowOffset";
export declare const mouseUps: Set<Function>;
export declare type DefaultProps = {};
export declare function createComponent<A extends Object = DefaultProps>(configIn: Partial<StaticConfig> | StaticConfigParsed): StaticComponent<A, void, StaticConfigParsed, any>;
export declare const Spacer: StaticComponent<{
	size?: number | `$${string}` | `$${number}` | undefined;
	flex?: number | boolean | undefined;
}, void, StaticConfigParsed, any>;
export declare function spacedChildren({ isZStack, children, space, flexDirection, }: {
	isZStack?: boolean;
	children: any;
	space?: any;
	flexDirection?: ViewStyle["flexDirection"];
}): any;
export declare function createShorthands<A extends Record<string, string>>(shorthands: A): A;
export declare const createTheme: <Theme extends {
	[key: string]: string | Variable;
}>(theme: Theme) => {
	[key in keyof Theme]: Variable;
};
export declare type CreateTamaguiProps = TamaguiProviderProps & Omit<GenericTamaguiConfig, "themes"> & {
	themes: {
		[key: string]: {
			[key: string]: string | number | Variable;
		};
	};
	mediaQueryDefaultActive?: MediaQueryKey[];
};
export declare const getHasConfigured: () => boolean;
export declare const getTamaguiConfig: () => TamaguiInternalConfig<CreateTokens, {
	[key: string]: {
		bg: string | Variable;
		bg2: string | Variable;
		bg3: string | Variable;
		bg4: string | Variable;
		color: string | Variable;
		color2: string | Variable;
		color3: string | Variable;
		color4: string | Variable;
		borderColor: string | Variable;
		borderColor2: string | Variable;
		shadowColor: string | Variable;
		shadowColor2: string | Variable;
	};
}, {}, {
	[x: string]: {
		[key: string]: string | number;
	};
}>;
export declare type ConfigListener = (conf: TamaguiInternalConfig) => void;
export declare const onConfiguredOnce: (cb: ConfigListener) => void;
export declare function createTamagui<Conf extends CreateTamaguiProps>(config: Conf): Conf extends CreateTamaguiConfig<infer A, infer B, infer C, infer D> ? TamaguiInternalConfig<A, B, C, D> : unknown;
export declare function getThemeParentClassName(themeName?: string | null): string;
export declare const createFont: <A extends GenericFont>(font: A) => A;
export declare function createTokens<T extends CreateTokens>(tokens: T): MakeTokens<T>;
export declare type MakeTokens<T> = T extends {
	font: {
		[key in infer A]: {
			size: infer B;
			lineHeight: infer C;
			letterSpacing: infer D;
			weight: infer Z;
			family: infer Y;
		};
	};
	color: infer E;
	space: infer F;
	size: infer G;
	radius: infer H;
	zIndex: infer J;
} ? {
	font: {
		[key in A]: {
			size: {
				[key in keyof B]: Variable;
			};
			lineHeight: {
				[key in keyof C]: Variable;
			};
			letterSpacing: {
				[key in keyof D]: Variable;
			};
			weight: {
				[key in keyof Z]: Variable;
			};
			family: Y;
		};
	};
	color: {
		[key in keyof E]: Variable;
	};
	space: {
		[key in keyof F]: Variable;
	};
	size: {
		[key in keyof G]: Variable;
	};
	radius: {
		[key in keyof H]: Variable;
	};
	zIndex: {
		[key in keyof J]: Variable;
	};
} : never;
export declare function styled<ParentComponent extends StaticComponent | React.Component<any>, Variants extends GetVariants<ParentComponent>>(Component: ParentComponent, options?: GetProps<ParentComponent> & {
	variants?: Variants;
}, staticExtractionOptions?: StaticConfig): StaticComponent<Omit<GetProps<ParentComponent>, keyof GetVariantProps<Variants>> & GetVariantProps<Variants> & MediaProps<GetVariantProps<Variants>>, any, StaticConfigParsed, any>;
export declare type GetProps<A> = A extends StaticComponent<infer Props> ? Props : A extends React.Component<infer Props> ? Props : {};
export declare type GetVariants<ParentComponent extends StaticComponent | React.Component<any>> = void | {
	[key: string]: {
		[key: string]: Partial<GetProps<ParentComponent>> | ((val: any, config: {
			tokens: TamaguiConfig["tokens"];
			theme: Themes extends {
				[key: string]: infer B;
			} ? B : unknown;
			props: GetProps<ParentComponent>;
		}) => Partial<GetProps<ParentComponent>>);
	};
};
export declare type GetVariantProps<Variants> = Variants extends void ? {} : {
	[Key in keyof Variants]?: keyof Variants[Key] extends `...${infer VariantSpread}` ? VariantSpread extends keyof Tokens ? keyof Tokens[VariantSpread] extends string | number ? `$${keyof Tokens[VariantSpread]}` : unknown : unknown : keyof Variants[Key] extends "true" ? boolean : keyof Exclude<Variants[Key], undefined>;
};
export declare const pseudos: {
	focusStyle: {
		name: string;
		priority: number;
	};
	pressStyle: {
		name: string;
		priority: number;
	};
	hoverStyle: {
		name: string;
		priority: number;
	};
};
export declare const stackDefaultStyles: {
	display?: string | undefined;
	flexBasis?: string | undefined;
	boxSizing?: string | undefined;
	alignItems: string;
	flexShrink: number;
};
export declare const isWeb: boolean;
export declare const isSSR: boolean;
export declare const useIsomorphicLayoutEffect: typeof useEffect;
export declare const isChrome: boolean;
export declare const supportsTouchWeb: boolean;
export declare const isTouchDevice: boolean;
export declare const isWebIOS: boolean;
export declare const rnw: Record<string, any>;
export declare const isObj: (x: any) => any;
export declare function getStylesAtomic(style: any, avoidCollection?: boolean): StyleObject[];
export declare const matchMedia: any;
export declare type ThemeableProps = {
	theme?: string | null;
	themeInverse?: boolean;
};
export declare const themeable: ThemeableHOC;
export interface ThemeableHOC {
	<R extends ReactElement<any, any> | null, P extends ThemeableProps = {}>(component: (props: P) => R): (props: P) => R;
}
export declare function useConstant<T>(fn: () => T): T;
export declare const mediaState: {
	[key in keyof MediaQueryState]: boolean;
};
export declare const addMediaQueryListener: (key: string, cb: any) => void;
export declare const removeMediaQueryListener: (key: string, cb: any) => void;
export declare const mediaQueryConfig: MediaQueries;
export declare const getMedia: () => {
	[x: string]: boolean;
};
export declare const configureMedia: ({ queries, defaultActive, }?: ConfigureMediaQueryOptions) => void;
export declare const useMedia: () => {
	[x: string]: boolean;
};
export declare function mediaObjectToString(query: string | MediaQueryObject): string;
export declare const useThemeName: () => string;
export declare const useDefaultThemeName: () => string | number;
export declare const useTheme: () => {
	bg: string | Variable;
	bg2: string | Variable;
	bg3: string | Variable;
	bg4: string | Variable;
	color: string | Variable;
	color2: string | Variable;
	color3: string | Variable;
	color4: string | Variable;
	borderColor: string | Variable;
	borderColor2: string | Variable;
	shadowColor: string | Variable;
	shadowColor2: string | Variable;
};
export declare type AnimatableProps = Partial<Pick<StackProps, "backgroundColor" | "borderColor" | "opacity"> & PerpectiveTransform & RotateTransform & RotateXTransform & RotateYTransform & RotateZTransform & ScaleTransform & ScaleXTransform & ScaleYTransform & TranslateXTransform & TranslateYTransform & SkewXTransform & SkewYTransform>;
export declare type AnimatedStackProps = StackProps & {
	animateState?: "in" | "out";
	velocity?: number;
	animation?: {
		from: AnimatableProps;
		to: AnimatableProps;
	};
};
export declare const AnimatedStack: ({ animateState, animation, velocity, children, animated, ...props }: AnimatedStackProps) => JSX.Element;
export declare const Stack: StaticComponent;
export declare const Text: StaticComponent;
export declare type ThemeProps = {
	disableThemeClass?: boolean;
	name: ThemeName | null;
	children?: any;
};
export declare const Theme: (props: ThemeProps) => any;
export declare type StringRecord = {
	[key: string]: string;
};
export declare function setThemeInversions(next: StringRecord): void;
export declare const ThemeInverse: (props: {
	children: any;
}) => JSX.Element;
export declare const TextAncestorContext: any;
export declare const TextAncestorProvider: (props: any) => any;
export declare type ShorthandViewStyleProps = {
	w?: ViewStyle["width"];
	h?: ViewStyle["height"];
	p?: ViewStyle["padding"];
	pt?: ViewStyle["paddingTop"];
	pb?: ViewStyle["paddingBottom"];
	pl?: ViewStyle["paddingLeft"];
	pr?: ViewStyle["paddingRight"];
	px?: ViewStyle["paddingHorizontal"];
	py?: ViewStyle["paddingVertical"];
	m?: ViewStyle["margin"];
	mt?: ViewStyle["marginTop"];
	mb?: ViewStyle["marginBottom"];
	ml?: ViewStyle["marginLeft"];
	mr?: ViewStyle["marginRight"];
	mx?: ViewStyle["marginHorizontal"];
	my?: ViewStyle["marginVertical"];
	f?: ViewStyle["flex"];
	fd?: ViewStyle["flexDirection"];
	fw?: ViewStyle["flexWrap"];
	fg?: ViewStyle["flexGrow"];
	fs?: ViewStyle["flexShrink"];
	fb?: ViewStyle["flexBasis"];
	ai?: ViewStyle["alignItems"];
	ac?: ViewStyle["alignContent"];
	jc?: ViewStyle["justifyContent"];
	als?: ViewStyle["alignSelf"];
	bc?: ViewStyle["backgroundColor"];
	br?: ViewStyle["borderRadius"];
	btrr?: ViewStyle["borderTopRightRadius"];
	bbrr?: ViewStyle["borderBottomRightRadius"];
	bblr?: ViewStyle["borderBottomLeftRadius"];
	btlr?: ViewStyle["borderTopLeftRadius"];
	pe?: "box-none" | "none" | "box-only" | "auto";
	zi?: ViewStyle["zIndex"];
};
export declare type ShorthandTextStyleProps = ShorthandViewStyleProps & {
	ta?: TextStyle["textAlign"];
	fs?: TextStyle["fontSize"];
	lh?: TextStyle["lineHeight"];
};
export declare type DebounceSettings = {
	leading?: boolean;
};
export declare function debounce<A extends Function>(func: A, wait?: number, leading?: boolean): A & {
	cancel: () => void;
};
export declare function useDebounce<A extends (...args: any) => any | undefined | null, DebouncedFn extends A & {
	cancel: () => void;
}>(fn: A, wait: number, options?: DebounceSettings, mountArgs?: any[]): DebouncedFn;
export declare function useDebounceValue<A>(val: A, amt?: number): A;
export declare function useForceUpdate(): Function;
export declare const useLayout: (props?: {
	stateless?: boolean | undefined;
	onLayout?: ((rect: LayoutChangeEvent) => void) | undefined;
}) => {
	layout: LayoutRectangle | null;
	onLayout: ((rect: LayoutChangeEvent) => void) | undefined;
	ref?: undefined;
} | {
	layout: LayoutRectangle | null;
	ref: import("react").MutableRefObject<any>;
	onLayout?: undefined;
};
export declare type IParams = {
	enabled?: boolean;
	callback: () => any;
};
export declare const keyboardDismissHandlerManager: {
	push: (handler: () => any) => () => void;
	length: () => number;
	pop: () => (() => any) | undefined;
};
export declare const useKeyboardDismissable: ({ enabled, callback }: IParams) => void;
export declare function useBackHandler({ enabled, callback }: IParams): void;
export declare type BlurViewProps = StackProps & {
	blurAmount?: number;
	blurRadius?: number;
	fallbackBackgroundColor?: string;
	blurType?: "xlight" | "light" | "dark" | "chromeMaterial" | "material" | "thickMaterial" | "thinMaterial" | "ultraThinMaterial" | "chromeMaterialDark" | "materialDark" | "thickMaterialDark" | "thinMaterialDark" | "ultraThinMaterialDark" | "chromeMaterialLight" | "materialLight" | "thickMaterialLight" | "thinMaterialLight" | "ultraThinMaterialLight" | "regular" | "prominent" | "extraDark";
	downsampleFactor?: number;
};
export declare function BlurView({ children, borderRadius, fallbackBackgroundColor, blurRadius, blurType, downsampleFactor, ...props }: BlurViewProps): JSX.Element;
export declare const Box: import("@tamagui/core").StaticComponent<Omit<Omit<import("@tamagui/core").StackProps, "elevation" | "fullscreen"> & {
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
declare const InteractiveFrame: import("@tamagui/core").StaticComponent<Omit<Omit<Omit<import("@tamagui/core").StackProps, "elevation" | "fullscreen"> & {
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, "transparent" | "size" | "active" | "disabled" | "chromeless"> & {
	size?: `$${string}` | `$${number}` | undefined;
	disabled?: boolean | undefined;
	active?: boolean | undefined;
	transparent?: boolean | undefined;
	chromeless?: boolean | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
	disabled?: boolean | undefined;
	active?: boolean | undefined;
	transparent?: boolean | undefined;
	chromeless?: boolean | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare type InteractiveFrameProps = GetProps<typeof InteractiveFrame>;
export declare type ButtonProps = InteractiveFrameProps & ThemeableProps & {
	textProps?: Omit<TextProps, "children">;
	noTextWrap?: boolean;
	icon?: JSX.Element | null;
	iconAfter?: JSX.Element | null;
};
export declare const Button: (props: Pick<Omit<Omit<Omit<import("@tamagui/core").StackProps, "elevation" | "fullscreen"> & {
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, "transparent" | "size" | "active" | "disabled" | "chromeless"> & {
	size?: `$${string}` | `$${number}` | undefined;
	disabled?: boolean | undefined;
	active?: boolean | undefined;
	transparent?: boolean | undefined;
	chromeless?: boolean | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
	disabled?: boolean | undefined;
	active?: boolean | undefined;
	transparent?: boolean | undefined;
	chromeless?: boolean | undefined;
}> & ThemeableProps & {
	textProps?: Omit<TextProps, "children"> | undefined;
	noTextWrap?: boolean | undefined;
	icon?: JSX.Element | null | undefined;
	iconAfter?: JSX.Element | null | undefined;
}, "hoverStyle" | "pressStyle" | "backgroundColor" | "borderBottomColor" | "borderBottomEndRadius" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderBottomStartRadius" | "borderBottomWidth" | "borderColor" | "borderEndColor" | "borderLeftColor" | "borderLeftWidth" | "borderRadius" | "borderRightColor" | "borderRightWidth" | "borderStartColor" | "borderStyle" | "borderTopColor" | "borderTopEndRadius" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderTopStartRadius" | "borderTopWidth" | "borderWidth" | "opacity" | "transform" | "alignContent" | "alignItems" | "alignSelf" | "aspectRatio" | "borderEndWidth" | "borderStartWidth" | "bottom" | "display" | "end" | "flex" | "flexBasis" | "flexDirection" | "flexGrow" | "flexShrink" | "flexWrap" | "height" | "justifyContent" | "left" | "margin" | "marginBottom" | "marginEnd" | "marginHorizontal" | "marginLeft" | "marginRight" | "marginStart" | "marginTop" | "marginVertical" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "overflow" | "padding" | "paddingBottom" | "paddingEnd" | "paddingHorizontal" | "paddingLeft" | "paddingRight" | "paddingStart" | "paddingTop" | "paddingVertical" | "position" | "right" | "start" | "top" | "width" | "zIndex" | "direction" | "shadowColor" | "shadowOffset" | "shadowOpacity" | "shadowRadius" | "cursor" | "contain" | "pointerEvents" | "x" | "y" | "scale" | "perspective" | "scaleX" | "scaleY" | "skewX" | "skewY" | "matrix" | "rotate" | "rotateY" | "rotateX" | "rotateZ" | "children" | "style" | "transparent" | "className" | `$${string}` | "space" | "size" | "elevation" | "testID" | "transformMatrix" | "rotation" | "translateX" | "translateY" | "accessibilityState" | "accessibilityValue" | "focusable" | "nativeID" | "onBlur" | "onClick" | "onClickCapture" | "onContextMenu" | "onFocus" | "onKeyDown" | "onKeyUp" | "onMoveShouldSetResponder" | "onMoveShouldSetResponderCapture" | "onResponderEnd" | "onResponderGrant" | "onResponderMove" | "onResponderReject" | "onResponderRelease" | "onResponderStart" | "onResponderTerminate" | "onResponderTerminationRequest" | "onScrollShouldSetResponder" | "onScrollShouldSetResponderCapture" | "onSelectionChangeShouldSetResponder" | "onSelectionChangeShouldSetResponderCapture" | "onStartShouldSetResponder" | "onStartShouldSetResponderCapture" | "dataSet" | "onMouseDown" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseOver" | "onMouseOut" | "onMouseUp" | "onScroll" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onWheel" | "href" | "hrefAttrs" | "hitSlop" | "onLayout" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityHint" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "onPress" | "onPressIn" | "onPressOut" | "active" | "onHoverIn" | "onHoverOut" | "fullscreen" | "tag" | "disabled" | keyof ThemeableProps | "animated" | "chromeless" | (`$${string}` & string) | "icon" | "iconAfter" | "textProps" | "noTextWrap"> & React.RefAttributes<unknown>) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
export declare const Circle: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Separator: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, "vertical"> & {
	vertical?: boolean | undefined;
} & import("@tamagui/core").MediaProps<{
	vertical?: boolean | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Form: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Input: import("@tamagui/core").StaticComponent<Omit<any, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const TextArea: import("@tamagui/core").StaticComponent<Omit<any, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare type GridProps = {
	children?: any;
	itemMinWidth?: number;
	gap?: any;
	columns?: number;
};
export declare function Grid({ children, columns, itemMinWidth, gap }: GridProps): JSX.Element;
export declare type SpanProps = React.DOMAttributes<HTMLSpanElement>;
export declare type HoverableProps = {
	children?: any;
	disableUntilSettled?: boolean;
	hoverDelay?: number;
	onHoverIn?: () => void;
	onHoverOut?: () => void;
	onPressIn?: SpanProps["onMouseDown"];
	onPressOut?: SpanProps["onClick"];
};
export declare type HoverableHandle = {
	close: () => void;
};
export declare const Hoverable: React.ForwardRefExoticComponent<HoverableProps & React.RefAttributes<HoverableHandle>>;
export interface IPopoverProps {
	defaultIsOpen?: boolean;
	isOpen?: boolean;
	trapFocus?: boolean;
	shouldFlip?: boolean;
	initialFocusRef?: React.RefObject<any>;
	finalFocusRef?: React.RefObject<any>;
	trigger: (props: {
		ref: any;
		onPress: (e?: GestureResponderEvent) => any;
		[key: string]: any;
	}, state: {
		open: boolean;
	}) => JSX.Element;
	crossOffset?: number;
	offset?: number;
	shouldOverlapWithTrigger?: boolean;
	children: React.ReactNode | ((state: {
		open: boolean;
	}) => React.ReactNode);
	isKeyboardDismissable?: boolean;
	placement?: "top" | "bottom" | "left" | "right" | "top left" | "top right" | "bottom left" | "bottom right" | "right top" | "right bottom" | "left top" | "left bottom";
	onClose?: () => void;
	onOpen?: () => void;
	onChangeOpen?: (open: boolean) => void;
}
export declare type HoverablePopoverHandle = {
	close: () => void;
};
export declare type HoverablePopoverProps = IPopoverProps & {
	delay?: number;
	allowHoverOnContent?: boolean;
	disableUntilSettled?: boolean;
};
export declare const HoverablePopover: React.ForwardRefExoticComponent<IPopoverProps & {
	delay?: number | undefined;
	allowHoverOnContent?: boolean | undefined;
	disableUntilSettled?: boolean | undefined;
} & React.RefAttributes<HoverablePopoverHandle>>;
export declare const InteractiveContainer: import("@tamagui/core").StaticComponent<Omit<StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Section: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Article: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Main: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Header: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Aside: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Footer: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Nav: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare type NativeLinearGradientProps = React.ComponentProps<typeof View> & React.PropsWithChildren<{
	colors: (number | string)[];
	locations?: number[] | null;
	start?: NativeLinearGradientPoint | null;
	end?: NativeLinearGradientPoint | null;
}>;
export declare type NativeLinearGradientPoint = [
	number,
	number
];
export declare const LinearGradient: ({ colors, locations, start, end, ...props }: NativeLinearGradientProps) => ReactElement;
export declare type ModalProps = Omit<ModalPropsReact, "children"> & AnimatedStackProps & {
	visible?: boolean;
	overlayBackground?: string;
	overlayDismisses?: boolean;
	children?: any | ((isOpen?: boolean) => any);
};
export declare const Modal: (props: ModalProps) => JSX.Element;
export declare const ModalYStack: import("@tamagui/core").StaticComponent<Omit<Omit<import("@tamagui/core").StackProps, "elevation" | "fullscreen"> & {
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Paragraph: import("@tamagui/core").StaticComponent<Omit<Omit<import("@tamagui/core").TextProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare type ParagraphProps = PropTypes<typeof Paragraph>;
export declare const SizableText: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").TextProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare type SizableTextProps = GetProps<typeof SizableText>;
declare const PopoverArrow: React.ForwardRefExoticComponent<Pick<Omit<import("@tamagui/core").RNWInternalProps, "children"> & Omit<import("react-native").ViewProps, "display" | "children"> & import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
	cursor?: string | undefined;
	contain?: string | undefined;
	display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
	pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
}> & {} & {
	hoverStyle?: (import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
		cursor?: string | undefined;
		contain?: string | undefined;
		display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
		pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
	}> & {}) | null | undefined;
	pressStyle?: (import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
		cursor?: string | undefined;
		contain?: string | undefined;
		display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
		pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
	}> & {}) | null | undefined;
} & import("@tamagui/core").MediaProps<import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
	cursor?: string | undefined;
	contain?: string | undefined;
	display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
	pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
}> & {} & {
	hoverStyle?: (import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
		cursor?: string | undefined;
		contain?: string | undefined;
		display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
		pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
	}> & {}) | null | undefined;
	pressStyle?: (import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
		cursor?: string | undefined;
		contain?: string | undefined;
		display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
		pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
	}> & {}) | null | undefined;
}> & {
	className?: string | undefined;
	tag?: string | undefined;
	animated?: boolean | undefined;
	onHoverIn?: ((e: MouseEvent) => any) | undefined;
	onHoverOut?: ((e: MouseEvent) => any) | undefined;
	onPress?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	onPressIn?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	onPressOut?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	onMouseEnter?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	onMouseLeave?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	space?: string | number | boolean | import("@tamagui/core").Variable | undefined;
	pointerEvents?: string | undefined;
} & {
	ref?: React.RefObject<HTMLElement | import("react-native").View> | ((node: HTMLElement | import("react-native").View) => any) | undefined;
	children?: any;
}, "hoverStyle" | "pressStyle" | "backgroundColor" | "borderBottomColor" | "borderBottomEndRadius" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderBottomStartRadius" | "borderBottomWidth" | "borderColor" | "borderEndColor" | "borderLeftColor" | "borderLeftWidth" | "borderRadius" | "borderRightColor" | "borderRightWidth" | "borderStartColor" | "borderStyle" | "borderTopColor" | "borderTopEndRadius" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderTopStartRadius" | "borderTopWidth" | "borderWidth" | "opacity" | "transform" | "alignContent" | "alignItems" | "alignSelf" | "aspectRatio" | "borderEndWidth" | "borderStartWidth" | "bottom" | "display" | "end" | "flex" | "flexBasis" | "flexDirection" | "flexGrow" | "flexShrink" | "flexWrap" | "height" | "justifyContent" | "left" | "margin" | "marginBottom" | "marginEnd" | "marginHorizontal" | "marginLeft" | "marginRight" | "marginStart" | "marginTop" | "marginVertical" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "overflow" | "padding" | "paddingBottom" | "paddingEnd" | "paddingHorizontal" | "paddingLeft" | "paddingRight" | "paddingStart" | "paddingTop" | "paddingVertical" | "position" | "right" | "start" | "top" | "width" | "zIndex" | "direction" | "shadowColor" | "shadowOffset" | "shadowOpacity" | "shadowRadius" | "cursor" | "contain" | "pointerEvents" | "x" | "y" | "scale" | "perspective" | "scaleX" | "scaleY" | "skewX" | "skewY" | "matrix" | "rotate" | "rotateY" | "rotateX" | "rotateZ" | "children" | "style" | "className" | `$${string}` | "space" | "testID" | "transformMatrix" | "rotation" | "translateX" | "translateY" | "accessibilityState" | "accessibilityValue" | "focusable" | "nativeID" | "onBlur" | "onClick" | "onClickCapture" | "onContextMenu" | "onFocus" | "onKeyDown" | "onKeyUp" | "onMoveShouldSetResponder" | "onMoveShouldSetResponderCapture" | "onResponderEnd" | "onResponderGrant" | "onResponderMove" | "onResponderReject" | "onResponderRelease" | "onResponderStart" | "onResponderTerminate" | "onResponderTerminationRequest" | "onScrollShouldSetResponder" | "onScrollShouldSetResponderCapture" | "onSelectionChangeShouldSetResponder" | "onSelectionChangeShouldSetResponderCapture" | "onStartShouldSetResponder" | "onStartShouldSetResponderCapture" | "dataSet" | "onMouseDown" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseOver" | "onMouseOut" | "onMouseUp" | "onScroll" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onWheel" | "href" | "hrefAttrs" | "hitSlop" | "onLayout" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityHint" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "onPress" | "onPressIn" | "onPressOut" | "onHoverIn" | "onHoverOut" | "tag" | "animated"> & React.RefAttributes<unknown>>;
declare const PopoverContent: React.ForwardRefExoticComponent<Pick<Omit<import("@tamagui/core").RNWInternalProps, "children"> & Omit<import("react-native").ViewProps, "display" | "children"> & import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
	cursor?: string | undefined;
	contain?: string | undefined;
	display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
	pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
}> & {} & {
	hoverStyle?: (import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
		cursor?: string | undefined;
		contain?: string | undefined;
		display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
		pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
	}> & {}) | null | undefined;
	pressStyle?: (import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
		cursor?: string | undefined;
		contain?: string | undefined;
		display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
		pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
	}> & {}) | null | undefined;
} & import("@tamagui/core").MediaProps<import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
	cursor?: string | undefined;
	contain?: string | undefined;
	display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
	pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
}> & {} & {
	hoverStyle?: (import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
		cursor?: string | undefined;
		contain?: string | undefined;
		display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
		pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
	}> & {}) | null | undefined;
	pressStyle?: (import("@tamagui/core").WithThemeValues<Omit<import("react-native").ViewStyle, "backfaceVisibility" | "display" | "elevation"> & import("@tamagui/core").TransformStyleProps & {
		cursor?: string | undefined;
		contain?: string | undefined;
		display?: "flex" | "inherit" | "block" | "inline" | "inline-flex" | "contents" | "none" | undefined;
		pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
	}> & {}) | null | undefined;
}> & {
	className?: string | undefined;
	tag?: string | undefined;
	animated?: boolean | undefined;
	onHoverIn?: ((e: MouseEvent) => any) | undefined;
	onHoverOut?: ((e: MouseEvent) => any) | undefined;
	onPress?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	onPressIn?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	onPressOut?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	onMouseEnter?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	onMouseLeave?: ((e: import("react-native").GestureResponderEvent) => any) | undefined;
	space?: string | number | boolean | import("@tamagui/core").Variable | undefined;
	pointerEvents?: string | undefined;
} & {
	ref?: React.RefObject<HTMLElement | import("react-native").View> | ((node: HTMLElement | import("react-native").View) => any) | undefined;
	children?: any;
}, "hoverStyle" | "pressStyle" | "backgroundColor" | "borderBottomColor" | "borderBottomEndRadius" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderBottomStartRadius" | "borderBottomWidth" | "borderColor" | "borderEndColor" | "borderLeftColor" | "borderLeftWidth" | "borderRadius" | "borderRightColor" | "borderRightWidth" | "borderStartColor" | "borderStyle" | "borderTopColor" | "borderTopEndRadius" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderTopStartRadius" | "borderTopWidth" | "borderWidth" | "opacity" | "transform" | "alignContent" | "alignItems" | "alignSelf" | "aspectRatio" | "borderEndWidth" | "borderStartWidth" | "bottom" | "display" | "end" | "flex" | "flexBasis" | "flexDirection" | "flexGrow" | "flexShrink" | "flexWrap" | "height" | "justifyContent" | "left" | "margin" | "marginBottom" | "marginEnd" | "marginHorizontal" | "marginLeft" | "marginRight" | "marginStart" | "marginTop" | "marginVertical" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "overflow" | "padding" | "paddingBottom" | "paddingEnd" | "paddingHorizontal" | "paddingLeft" | "paddingRight" | "paddingStart" | "paddingTop" | "paddingVertical" | "position" | "right" | "start" | "top" | "width" | "zIndex" | "direction" | "shadowColor" | "shadowOffset" | "shadowOpacity" | "shadowRadius" | "cursor" | "contain" | "pointerEvents" | "x" | "y" | "scale" | "perspective" | "scaleX" | "scaleY" | "skewX" | "skewY" | "matrix" | "rotate" | "rotateY" | "rotateX" | "rotateZ" | "children" | "style" | "className" | `$${string}` | "space" | "testID" | "transformMatrix" | "rotation" | "translateX" | "translateY" | "accessibilityState" | "accessibilityValue" | "focusable" | "nativeID" | "onBlur" | "onClick" | "onClickCapture" | "onContextMenu" | "onFocus" | "onKeyDown" | "onKeyUp" | "onMoveShouldSetResponder" | "onMoveShouldSetResponderCapture" | "onResponderEnd" | "onResponderGrant" | "onResponderMove" | "onResponderReject" | "onResponderRelease" | "onResponderStart" | "onResponderTerminate" | "onResponderTerminationRequest" | "onScrollShouldSetResponder" | "onScrollShouldSetResponderCapture" | "onSelectionChangeShouldSetResponder" | "onSelectionChangeShouldSetResponderCapture" | "onStartShouldSetResponder" | "onStartShouldSetResponderCapture" | "dataSet" | "onMouseDown" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseOver" | "onMouseOut" | "onMouseUp" | "onScroll" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onWheel" | "href" | "hrefAttrs" | "hitSlop" | "onLayout" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityHint" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "onPress" | "onPressIn" | "onPressOut" | "onHoverIn" | "onHoverOut" | "tag" | "animated"> & React.RefAttributes<unknown>>;
export interface PopoverI extends React.FunctionComponent<IPopoverProps> {
	Arrow: typeof PopoverArrow;
	Content: typeof PopoverContent;
}
export declare const Popover: PopoverI;
export declare const PopoverProvider: (props: {
	children?: any;
}) => JSX.Element;
export declare const YStack: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, "elevation" | "fullscreen"> & {
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const XStack: import("@tamagui/core").StaticComponent<Omit<Omit<import("@tamagui/core").StackProps, "elevation" | "fullscreen"> & {
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const ZStack: import("@tamagui/core").StaticComponent<Omit<Omit<import("@tamagui/core").StackProps, "elevation" | "fullscreen"> & {
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	fullscreen?: boolean | undefined;
	elevation?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Table: import("@tamagui/core").StaticComponent<Omit<StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const TableRow: import("@tamagui/core").StaticComponent<Omit<StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const TableHead: import("@tamagui/core").StaticComponent<Omit<StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const TableHeadCell: import("@tamagui/core").StaticComponent<Omit<StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const TableHeadText: import("@tamagui/core").StaticComponent<Omit<TextProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare type TableCellProps = StackProps & TextProps;
export declare const TableCell: import("@tamagui/core").StaticComponent<Omit<StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const Title: import("@tamagui/core").StaticComponent<Omit<Omit<Omit<import("@tamagui/core").TextProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const H1: import("@tamagui/core").StaticComponent<Omit<Omit<Omit<Omit<import("@tamagui/core").TextProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const H2: import("@tamagui/core").StaticComponent<Omit<Omit<Omit<Omit<import("@tamagui/core").TextProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const H3: import("@tamagui/core").StaticComponent<Omit<Omit<Omit<Omit<import("@tamagui/core").TextProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const H4: import("@tamagui/core").StaticComponent<Omit<Omit<Omit<Omit<import("@tamagui/core").TextProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const H5: import("@tamagui/core").StaticComponent<Omit<Omit<Omit<Omit<import("@tamagui/core").TextProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const H6: import("@tamagui/core").StaticComponent<Omit<Omit<Omit<Omit<import("@tamagui/core").TextProps, "size"> & {
	size?: `$${string}` | `$${number}` | undefined;
} & import("@tamagui/core").MediaProps<{
	size?: `$${string}` | `$${number}` | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare type ToastOptions = {
	duration?: number;
	type?: "info" | "success" | "error";
};
export declare const Toast: {
	clear: () => void;
	show: (content: any, options?: ToastOptions | undefined) => void;
	error: (content: any, options?: Omit<ToastOptions, "type"> | undefined) => void;
	success: (content: any, options?: Omit<ToastOptions, "type"> | undefined) => void;
};
export declare const ToastRoot: React.NamedExoticComponent<object>;
export declare const EnsureFlexed: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").TextProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare type TooltipProps = Omit<HoverablePopoverProps, "trigger"> & {
	contents?: string | any;
	tooltipFrameProps?: Omit<StackProps, "children">;
};
export declare const Tooltip: ({ contents, tooltipFrameProps, ...props }: TooltipProps) => JSX.Element;
export declare const TouchableOpacity: (props: PressableProps) => JSX.Element;
export declare type IFadeProps = StackProps & {
	in?: boolean;
	entryDuration?: number;
	exitDuration?: number;
	delay?: number;
};
export declare type IScaleFadeProps = StackProps & {
	in?: boolean;
	duration?: number;
	delay?: number;
	initialScale?: number;
};
export declare type ISlideProps = StackProps & {
	in?: boolean;
	duration?: number;
	delay?: number;
	placement?: "top" | "bottom" | "right" | "left";
};
export declare type ISlideFadeProps = StackProps & {
	in?: boolean;
	delay?: number;
	duration?: number;
	offsetX?: number;
	offsetY?: number;
};
export interface ISupportedTransitions {
	opacity?: number;
	translateY?: number;
	translateX?: number;
	scale?: number;
	scaleX?: number;
	scaleY?: number;
	rotate?: string;
}
export interface ITransitionConfig {
	type?: "timing" | "spring";
	easing?: (value: number) => number;
	overshootClamping?: boolean;
	restDisplacementThreshold?: number;
	restSpeedThreshold?: number;
	velocity?: number | {
		x: number;
		y: number;
	};
	bounciness?: number;
	speed?: number;
	tension?: number;
	friction?: number;
	stiffness?: number;
	mass?: number;
	damping?: number;
	delay?: number;
	duration?: number;
	useNativeDriver?: boolean;
}
export interface ITransitionStyleProps extends ISupportedTransitions {
	transition?: ITransitionConfig;
}
export interface IPresenceTransitionProps extends ViewProps {
	onTransitionComplete?: (s: "entered" | "exited") => any;
	initial?: ISupportedTransitions;
	animate?: ITransitionStyleProps;
	exit?: ITransitionStyleProps;
	visible?: boolean;
	children?: ReactNode;
	as?: ReactNode;
}
export declare const PresenceTransition: React.MemoExoticComponent<React.ForwardRefExoticComponent<IPresenceTransitionProps & React.RefAttributes<unknown>>>;
export declare const VisuallyHidden: import("@tamagui/core").StaticComponent<Omit<import("@tamagui/core").StackProps, never> & ({} | {
	[x: string]: string | number | undefined;
}) & import("@tamagui/core").MediaProps<{} | {
	[x: string]: string | number | undefined;
}>, any, import("@tamagui/core").StaticConfigParsed, any>;
export declare const SafeAreaProvider: ({ initialWindowMetrics, children, }: {
	children?: any;
	initialWindowMetrics?: any;
}) => JSX.Element;
export declare const prevent: (e: any) => any[];
export { useSafeAreaInsets } from "react-native-safe-area-context";
export * from "@tamagui/helpers";
export * from "@tamagui/core";
export * from "@tamagui/use-debounce";
export * from "@tamagui/use-force-update";

export {};
